generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @unique(map: "User_new_id_key") @db.Uuid
  email             String          @unique
  firstName         String
  lastName          String
  maidenName        String?
  bday              DateTime
  role              Role            @default(USER)
  profileImageURL   String?
  profile           Profile?
  profileId         Int?
  
  readChats         Chat[]          @relation("ReadChats")
  writeChats        Chat[]          @relation("WriteChats")
  friends           User[]          @relation("UserFriends")
  friendsBy         User[]          @relation("UserFriends")
  messages          Message[]
  matches           Match[]         @relation("matchingUser")
  matchedBy         Match[]         @relation("matchedUser")
  seenUsers         User[]          @relation("seenUser")
  seenBy            User[]          @relation("seenUser")

  approvals         Approval[]

  sentRequests      friendRequest[] @relation("sendingUser")
  receivedRequests  friendRequest[] @relation("receivingUser")

  notifs            Notification[]

  warnings          Warning[]
  bannedUntil       DateTime?

  banRequest        BanRequest?

  blocked           User[]          @relation("blocked")
  blockdBy          User[]          @relation("blocked")

  blockRequestsMade BlockRequest[]  @relation("createBlockStart")
  blockRequestsFor  BlockRequest[]  @relation("createBlockEnd")
  BlockApproval     BlockApproval[]
}

model Profile {
  id     Int      @id @default(autoincrement())
  user   User     @relation(fields: [userId], references: [id])
  userId String   @unique @db.Uuid
  images String[]
  gender Gender   @default(Undisclosed)
  sexuality Gender[]
  hobbies String[]
  height Int
  bday DateTime

  //instead of having the bday be hard-coded, just call user.bday
}

model Match {
  id             Int        @id @default(autoincrement())
  user1          User       @relation("matchingUser", fields:[user1Id], references: [id])
  user1Id        String     @unique @db.Uuid
  user2          User       @relation("matchedUser", fields:[user2Id], references: [id])
  user2Id        String     @unique @db.Uuid
  user1Approvals Approval[] @relation("User1Approvals")
  user2Approvals Approval[] @relation("User2Approvals")
  dateTime       DateTime
  chats          Chat[]     @relation("MatchChats")
}

model Approval {
  id                  Int     @id @default(autoincrement())
  user                User    @relation(fields: [userId], references: [id])
  userId              String  @db.Uuid
  approverId          String  @db.Uuid
  matchingApprovals   Match?  @relation("User1Approvals", fields: [matchingApprovalsid], references: [id])
  matchingApprovalsid Int?
  matchedApprovals    Match?  @relation("User2Approvals", fields: [matchedApprovalsid], references: [id])
  matchedApprovalsid  Int?
  dateTime            DateTime
}

model Image {
  id           Int    @id @default(autoincrement())
  url          String @unique
  chatPictures Chat?
}

model Message {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references:[id])
  userId   String   @db.Uuid
  chatId   Int
  dateTime DateTime
  content  String   // Add this line to store message text
  chat     Chat     @relation(fields: [chatId], references: [id])

  Warning    Warning?
  BanRequest BanRequest?
}

model Chat {
  id        Int       @id @default(autoincrement())
  name      String?
  imageURL  String?   @unique
  image     Image?    @relation(fields: [imageURL], references: [url])
  messages  Message[]
  match     Match?    @relation("MatchChats", fields: [matchId], references: [id])
  matchId   Int?
  type        ChatType  @default(MAIN)
  readUsers   User[]    @relation("ReadChats")
  writeUsers  User[]    @relation("WriteChats")
}

model friendRequest{
  id              Int     @id @default(autoincrement())
  sendingUser     User?   @relation("sendingUser", fields: [sendingUserId], references: [id])
  sendingUserId   String? @db.Uuid
  receivingUser   User?   @relation("receivingUser", fields:[receivingUserId], references: [id])
  receivingUserId String? @db.Uuid
}

model Notification{
  id                Int     @id @default(autoincrement())
  receivingUser     User    @relation(fields: [receivingUserId], references: [id])
  receivingUserId   String  @db.Uuid
  sendingUserId     String? @db.Uuid
  type              NotifType // notifs are displayed differently for what they pertain to
  message           String //message presented to user
  content           Int // not estsablishing a relationship here - too many different things to make relationships of
}

model BanRequest{
  id Int @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId String? @db.Uuid @unique

  reason String
  proposedTime DateTime? // proposed time to be banned until said tme

  message Message @relation(fields: [messageId], references: [id])
  messageId Int @unique

}

model Warning{
  id Int @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  reason String
  message Message @relation(fields: [messageId], references: [id])
  messageId Int @unique

}

model BlockRequest{
  id Int @id @default(autoincrement())
  creator User? @relation("createBlockStart", fields: [creatorId], references: [id]) //user to be blocked
  creatorId String? @db.Uuid
  toBlock User? @relation("createBlockEnd", fields: [toBlockId], references: [id]) // user to be blocked
  toBlockId String? @db.Uuid
  type BlockRequestType // used to check for blocks, unblocks

  approvals BlockApproval[] // check length of this - maybe put custom amount per user?
}

model BlockApproval{
  id Int @id @default(autoincrement())

  approver User @relation(fields: [approverId], references: [id]) // bind user to approval
  approverId String @db.Uuid

  blockRequest BlockRequest @relation(fields: [blockRequestId], references: [id]) // bind blockrequest to approval
  blockRequestId Int
}


enum BlockRequestType {
  UNBLOCK
  BLOCK
}

enum NotifType {
  FRIEND
  MATCH   // opens up chat
  APPROVE // need something to see the match, or open up a page similar to match
  MESSAGE // pass in chat id for this
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum Sexuality {
  Male
  Female
  Other
}

enum Gender {
  Undisclosed
  Male
  Female
}

enum ChatType {
  MAIN
  SIDE1
  SIDE2
}
